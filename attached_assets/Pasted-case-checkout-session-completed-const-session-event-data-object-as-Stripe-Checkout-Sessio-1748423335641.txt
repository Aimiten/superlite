case 'checkout.session.completed': {
    const session = event.data.object as Stripe.Checkout.Session;

    // Hae tilauksen tiedot
    const subscription = await stripe.subscriptions.retrieve(
      session.subscription as string
    );

    let userId = session.metadata?.user_id;

    // Jos ei ole olemassa olevaa käyttäjää, luo uusi
    if (!userId && session.customer_details?.email) {
      // Tarkista onko sähköpostilla jo tili
      const { data: existingUser } = await supabase
        .from('profiles')
        .select('id')
        .eq('email', session.customer_details.email)
        .single();

      if (existingUser) {
        userId = existingUser.id;
      } else {
        // Luo uusi käyttäjä
        const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
          email: session.customer_details.email,
          email_confirm: true,
          user_metadata: {
            full_name: session.customer_details.name,
          }
        });

        if (createError) {
          console.error('Error creating user:', createError);
          throw createError;
        }

        userId = newUser.user?.id;

        // Lähetä salasanan asetusviesti
        if (userId) {
          await supabase.auth.admin.generateLink({
            type: 'recovery',
            email: session.customer_details.email,
          });
        }
      }
    }

    // Tallenna/päivitä stripe_customer
    if (userId) {
      await supabase
        .from('stripe_customers')
        .upsert({
          user_id: userId,
          stripe_customer_id: session.customer as string,
          email: session.customer_details?.email,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        });

      // Tallenna tilaus
      await supabase
        .from('subscriptions')
        .upsert({
          user_id: userId,
          stripe_subscription_id: subscription.id,
          stripe_customer_id: session.customer as string,
          status: subscription.status,
          price_id: subscription.items.data[0].price.id,
          current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),
          current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),
          cancel_at_period_end: subscription.cancel_at_period_end,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        });
    }

    console.log('Subscription created/updated successfully');
    break;
  }
