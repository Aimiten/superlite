
// Supabase functions deployment script for Replit
// Suora deployaus Supabase CLI:n beta-versiolla, joka tukee --use-api lippua (ei Docker-riippuvuutta)
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// Supabase projektin tunniste (project ref)
const PROJECT_REF = 'rmkleyyzieacwltcbgzs';

// Argumantit komentorivill√§
const args = process.argv.slice(2);
const shouldShowHelp = args.includes('--help') || args.includes('-h');
const shouldDeployAll = args.includes('all');
const specificFunctions = args.filter(arg => !arg.startsWith('-') && arg !== 'all');

if (shouldShowHelp) {
  console.log(`
üìã Supabase Functions Deployment Tool

K√§ytt√∂:
  node scripts/deploy-functions.js [options] [function names]

Vaihtoehdot:
  all         Deployaa kaikki funktiot
  [nimi]      Deployaa vain nimetty funktio (voit listata useita)
  --help, -h  N√§yt√§ t√§m√§ ohje

Esimerkkej√§:
  node scripts/deploy-functions.js all                  # Deployaa kaikki funktiot
  node scripts/deploy-functions.js get-shared-company   # Deployaa vain yhden funktion
  node scripts/deploy-functions.js func1 func2          # Deployaa useita nimettyj√§ funktioita
  `);
  process.exit(0);
}

console.log(`
üì¢ Supabase-funktioiden deployment-ty√∂kalu

‚ö° T√§m√§ ty√∂kalu k√§ytt√§√§ Supabase CLI:n beta-versiota, joka tukee --use-api lippua.
   N√§in funktiot voidaan deployata suoraan Replitist√§ ilman Dockeria!
`);

// Funktioiden hakemisto
const FUNCTIONS_DIR = path.join(process.cwd(), 'supabase/functions');

// Listaa saatavilla olevat funktiot
try {
  const functions = fs.readdirSync(FUNCTIONS_DIR)
    .filter(item => {
      const itemPath = path.join(FUNCTIONS_DIR, item);
      return fs.statSync(itemPath).isDirectory() && 
            fs.existsSync(path.join(itemPath, 'index.ts'));
    });

  console.log(`üìã Saatavilla olevat funktiot:`);
  functions.forEach(func => console.log(`  - ${func}`));
  console.log();

  // Tarkista onko funktioita ylip√§√§t√§√§n
  if (functions.length === 0) {
    console.log('‚ùå Ei l√∂ytynyt yht√§√§n funktiota supabase/functions hakemistosta!');
    process.exit(1);
  }

  // P√§√§t√§ mit√§ funktioita deployataan
  let functionsToBeDeployed = [];
  if (shouldDeployAll) {
    functionsToBeDeployed = functions;
    console.log(`üöÄ Deployataan kaikki funktiot (${functionsToBeDeployed.length} kpl)...`);
  } else if (specificFunctions.length > 0) {
    // Tarkista ett√§ kaikki annetut funktiot ovat olemassa
    const nonExistingFuncs = specificFunctions.filter(func => !functions.includes(func));
    if (nonExistingFuncs.length > 0) {
      console.log(`‚ùå Seuraavia funktioita ei l√∂ydy: ${nonExistingFuncs.join(', ')}`);
      process.exit(1);
    }
    functionsToBeDeployed = specificFunctions;
    console.log(`üöÄ Deployataan valitut funktiot: ${functionsToBeDeployed.join(', ')}`);
  } else {
    console.log(`‚ÑπÔ∏è Et valinnut yht√§√§n funktiota. K√§yt√§ 'all' deployataksesi kaikki funktiot.`);
    console.log(`‚ÑπÔ∏è K√§yt√§ '--help' n√§hd√§ksesi kaikki komennot.`);
    process.exit(0);
  }

  // Asenna Supabase CLI beta-versio
  console.log(`\nüì¶ Asennetaan Supabase CLI beta-versio...`);
  try {
    execSync('npm install -g supabase@beta || true', { stdio: 'inherit' });
    console.log(`‚úÖ Supabase CLI beta asennettu.`);
  } catch (error) {
    console.log(`‚ö†Ô∏è Supabase CLI:n asennus saattoi ep√§onnistua, mutta kokeillaan silti deployausta npx:n kautta.`);
  }

  // Deployaa funktiot
  if (shouldDeployAll) {
    console.log(`\nüöÄ Deployataan kaikki funktiot projektiin ${PROJECT_REF}...`);
    try {
      // Varmistetaan --use-api lipun k√§ytt√∂ Docker-vapaan version kanssa
      execSync(`npx supabase@beta functions deploy --all --use-api --project-ref ${PROJECT_REF}`, { 
        stdio: 'inherit' 
      });
      console.log(`\n‚úÖ Kaikki funktiot on deployattu onnistuneesti!`);
    } catch (error) {
      console.error(`\n‚ùå Virhe funktioiden deployauksessa: ${error.message}`);
      process.exit(1);
    }
  } else {
    // Deployaa funktiot yksi kerrallaan
    let successCount = 0;
    let failedFunctions = [];

    for (const func of functionsToBeDeployed) {
      console.log(`\nüöÄ Deployataan funktio '${func}' projektiin ${PROJECT_REF}...`);
      try {
        // Varmistetaan --use-api lipun k√§ytt√∂ Docker-vapaan version kanssa
        execSync(`npx supabase@beta functions deploy ${func} --use-api --project-ref ${PROJECT_REF}`, { 
          stdio: 'inherit' 
        });
        console.log(`‚úÖ Funktio '${func}' deployattu onnistuneesti!`);
        successCount++;
      } catch (error) {
        console.error(`‚ùå Virhe funktion '${func}' deployauksessa: ${error.message}`);
        failedFunctions.push(func);
      }
    }

    // Yhteenveto
    console.log(`\nüìä Deployauksen yhteenveto:`);
    console.log(`   ‚úÖ Onnistuneet deployaukset: ${successCount}/${functionsToBeDeployed.length}`);
    
    if (failedFunctions.length > 0) {
      console.log(`   ‚ùå Ep√§onnistuneet funktiot: ${failedFunctions.join(', ')}`);
      process.exit(1);
    }
  }

} catch (error) {
  console.error(`\n‚ùå Vakava virhe: ${error.message}`);
  process.exit(1);
}
